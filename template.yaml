AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Portfolio Backend

  SAM Template for creating the backend of my portfolio website

  '
Globals:
  Function:
    Timeout: 3
Resources:
#API Gateway
  PortfolioBackendAPI:
    Type: AWS::Serverless::API
    Properties:
      Name: Portfolio Backend API Gateway
      StageName: Prod 
      Cors:
        AllowHeaders: "'Access-Control-Allow-Origin'"
        AllowOrigin: "'*'"
#Lambda Function         
  PortfolioBackendFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PortfolioBackendFunction.py
      Description: 'Simple backend read/write to DyanmoDB'
      Handler: PortfolioBackendFunction.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 3
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:GetItem'
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':tables/VisitorsTable'        
      Events:
        PortfolioBackendAPI:
          Type: Api
          Properties:
            Path: /portfoliobackend
            Method: get
            RestApiId:
              Ref: PortfolioBackendAPI
#DynamoDB Table
  VisitorsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VisitorCounter
      KeySchema:
          -AttributeName: website
          KeyType: HASH
      AttributeDefinitions:
          -AttributeName: website
          AttributeType: S
      ProvisionedThroughput: 
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
      BillingMode: PAY_PER_REQUEST
Outputs:
  PortfolioBackendApi:
    Description: API Gateway endpoint URL for Prod stage for Portfolio Backend function
    Value:
      Fn::Sub: https://${PortfolioBackendAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  PortfolioBackendFunction:
    Description: Portfolio Backend Lambda Function ARN
    Value:
      Fn::GetAtt:
      - PortfolioBackendFunction
      - Arn
  PortfolioBackendFunctionIamRole:
    Description: Implicit IAM Role created for Portfolio Backend function
    Value:
      Fn::GetAtt:
      - PortfolioBackendFunctionRole
      - Arn
  VisitorsTable:
    Description: DynamoDB table to record visitor count to my portfolio
    Value:
      Fn::GetAtt:
      - VisitorsTable
      - Arn